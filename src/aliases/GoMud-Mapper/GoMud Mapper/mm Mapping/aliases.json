[
       {
              "name": "Manually set the room coordinates",
              "isActive": "yes",
              "regex": "^(?:rc|room coords) (?:v(\\d+) )?(.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Add a special exit",
              "isActive": "yes",
              "regex": "^(?:spe|exit special) (\\w+) (.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Add a special exit from one remote room to another",
              "isActive": "yes",
              "regex": "^spev (\\d+) (\\d+) (.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "List special exits",
              "isActive": "yes",
              "regex": "^spe list(?: (.+))?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Clear all special exits",
              "isActive": "yes",
              "regex": "^(?:spe clear|exit special clear) ?(\\w+)?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Create a room",
              "isActive": "yes",
              "regex": "^(?:rlc|room create) (.+)?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Create a link between two rooms",
              "isActive": "yes",
              "regex": "^(?:rlk|room link) ?(\\d+)? (\\w+)( one)?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete a room",
              "isActive": "yes",
              "regex": "^(?:rld|room delete) ?(\\w+)?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete a link",
              "isActive": "yes",
              "regex": "^(?:urlk|room unlink) (\\w+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Move room to another area",
              "isActive": "yes",
              "regex": "^room area (?:v(\\d+) )?(.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Set a room character",
              "isActive": "yes",
              "regex": "^rcc ([^ ]+)(?: (\\w+))?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Set room weight",
              "isActive": "yes",
              "regex": "^rw(?: (\\w+))? (\\d+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Set exit weight",
              "isActive": "yes",
              "regex": "^rwe(?: (\\d+))? (\\d+) (.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Add/delete doors",
              "isActive": "yes",
              "regex": "^rd(?: (\\d+))? (\\w+)(?: (\\w+))?$",
              "script": "local room = (matches[2] ~= \"\" and tonumber(matches[2]) or mmp.currentroom)\n\nlocal direction, status = matches[3], matches[4]\n\nif not roomExists(room) then mmp.echo(\"Room \"..room..\" doesn't exist. It has to before we can make doors in it.\") return end\n\nlocal validdirs = {'e', 's', 'w', 'n', 'ne', 'se', 'sw', 'nw', 'in', 'out', 'up', 'down'}\n\nif not table.contains(validdirs, direction) then\n  mmp.echo(\"Can't make a door in the '\"..direction..\"' direction - available choices are:\\n  \"..table.concat(validdirs, ', '))\n  return\nend\n\nlocal statusnum\n\nif status == \"\" or status == \"open\" or status == \"o\" then\n  statusnum = 1\nelseif status == \"closed\" or status ==  \"c\" then\n  statusnum = 2\nelseif status == \"locked\" or status ==  \"l\" then\n  statusnum = 3\nelseif status == \"clear\" or status == \"gone\" then\n  statusnum = 0\nend\n\nif not statusnum then mmp.echo(\"Unrecognized option - a door can be open, closed, locked or gone.\") return end\n\nsetDoor(room, direction, statusnum)\n\nif statusnum == 0 then\n  mmp.echo(\"OK, door removed.\")\nelse\n  mmp.echo(\"OK, door added/adjusted.\")\nend",
              "isFolder": "no"
       },
       {
              "name": "-- (area functions)",
              "isActive": "no",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Create an area",
              "isActive": "yes",
              "regex": "^area add (.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete an area",
              "isActive": "yes",
              "regex": "^area delete (.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Cancel area deletion",
              "isActive": "yes",
              "regex": "^cancel area deletion$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Rename an area",
              "isActive": "yes",
              "regex": "^area rename (.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "List continents",
              "isActive": "yes",
              "regex": "^(?:acl|area continents)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Add area to continent",
              "isActive": "yes",
              "regex": "^aca ([\\w']+)(?: (.+))?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "remove area from continent",
              "isActive": "yes",
              "regex": "^acr ([\\w']+)(?: (.+))?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Add/remove a ferry room",
              "isActive": "yes",
              "regex": "^fr (\\d+) (add|remove)$",
              "script": "local room = tonumber(matches[2])\n\nif matches[3] == \"add\" then\n  if mmp.ferry_rooms[room] then\n    mmp.echo(\"Ferry room #\"..room..\" is already recorded as such.\") return\n  else\n    mmp.ferry_rooms[room] = true; mmp.echo(\"Added #\"..room..\" to be a ferry room.\")\n  end\nelse\n  if not mmp.ferry_rooms[room] then\n    mmp.echo(\"Room #\"..room..\" isn't a ferry one already.\") return\n  else\n    mmp.ferry_rooms[room] = nil; mmp.echo(\"Removed #\"..room..\" from being a ferry room.\")\n  end\nend\n\nlocal keys = {}; for k,_ in pairs(mmp.ferry_rooms) do keys[#keys+1] = k end\n\nsetRoomUserData(1, \"ferry rooms\", yajl.to_string(keys))",
              "isFolder": "no"
       },
       {
              "name": "Show ferry rooms",
              "isActive": "yes",
              "regex": "^fr show$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Weight ferry exits",
              "isActive": "yes",
              "regex": "^weight ferry exits$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "-- (Map feature functions)",
              "isActive": "no",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Create map feature",
              "isActive": "yes",
              "regex": "^feature create (.+?)(?: char (.+))?$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Add map feature to room",
              "isActive": "yes",
              "regex": "^(?:room create feature|rcf) (?:v(\\d+) )?(.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete map feature from room",
              "isActive": "yes",
              "regex": "^(?:room delete feature|rdf) (?:v(\\d+) )?(.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete map feature",
              "isActive": "yes",
              "regex": "^feature delete (.+)$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "migrate features",
              "isActive": "yes",
              "regex": "^feature migrate$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "-- (dangerous functions)",
              "isActive": "no",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Clear the map completely",
              "isActive": "yes",
              "regex": "^map delete all$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete shop stockroom exits",
              "isActive": "yes",
              "regex": "^delete known stockrooms$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Clear continent data",
              "isActive": "yes",
              "regex": "^clear continent data$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete suffixed periods",
              "isActive": "yes",
              "regex": "^delete suffixed periods$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Find single exits",
              "isActive": "yes",
              "regex": "^find single exits$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Show char marks",
              "isActive": "yes",
              "regex": "^show char marks$",
              "script": "",
              "isFolder": "no"
       },
       {
              "name": "Delete all special exits across a map",
              "isActive": "yes",
              "regex": "^spe delete all(?: (.+))?$",
              "script": "",
              "isFolder": "no"
       }
]